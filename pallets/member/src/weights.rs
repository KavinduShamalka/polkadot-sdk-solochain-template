//! Autogenerated weights for pallet-member
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_member
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/member/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_member.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
	fn register_member() -> Weight;
	fn get_member() -> Weight;
	fn update_member() -> Weight;
	fn submit_kyc() -> Weight;
	fn update_kyc_status() -> Weight;
	fn admin_update_kyc_status() -> Weight;
}

/// Weights for pallet_member using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Member Something (r:0 w:1)
	/// Proof: Member Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: Member Something (r:1 w:1)
	/// Proof: Member Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: Member AccountToMember (r:1 w:1)
    /// Storage: Member MemberByEmail (r:1 w:1)
    /// Storage: Member Members (r:0 w:1)
    /// Storage: Member MemberCount (r:1 w:1)
    /// Storage: Member MemberByIndex (r:0 w:1)
    /// Proof: Member AccountToMember (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Proof: Member MemberByEmail (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    /// Proof: Member MemberCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Proof: Member MemberByIndex (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
    fn register_member() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `76`
        //  Estimated: `4489`
        // Minimum execution time: 50_000_000 picoseconds.
        Weight::from_parts(52_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }

    /// Storage: Member AccountToMember (r:1 w:0)
    /// Storage: Member Members (r:1 w:0)
    /// Proof: Member AccountToMember (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    fn get_member() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `435`
        //  Estimated: `4489`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(21_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(0_u64))
    }

    /// Storage: Member AccountToMember (r:1 w:0)
    /// Storage: Member Members (r:1 w:1)
    /// Storage: Member MemberByEmail (r:1 w:2) // worst case: remove old + insert new
    /// Proof: Member AccountToMember (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    /// Proof: Member MemberByEmail (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn update_member() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `567`
        //  Estimated: `4489`
        // Minimum execution time: 40_000_000 picoseconds.
        Weight::from_parts(43_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    /// Storage: Member AccountToMember (r:1 w:0)
    /// Storage: Member Members (r:1 w:1)
    /// Proof: Member AccountToMember (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    fn submit_kyc() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `435`
        //  Estimated: `4489`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(27_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: Member Members (r:1 w:1)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    fn update_kyc_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `435`
        //  Estimated: `4489`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(22_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: Member Members (r:1 w:1)
    /// Proof: Member Members (max_values: None, max_size: Some(1024), added: 3499, mode: MaxEncodedLen)
    fn admin_update_kyc_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `435`
        //  Estimated: `4489`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(22_000_000, 4489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests - implements WeightInfo for () type
impl WeightInfo for () {
	/// Storage: Member Something (r:0 w:1)
	/// Proof: Member Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Storage: Member Something (r:1 w:1)
	/// Proof: Member Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Register member with email uniqueness check and indexing
	fn register_member() -> Weight {
        Weight::from_parts(52_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
	
    /// Get member data with ownership verification
    fn get_member() -> Weight {
        Weight::from_parts(21_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(0_u64))
    }

    /// Update member with email mapping and KYC reset logic
    fn update_member() -> Weight {
        Weight::from_parts(43_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }

    /// Submit KYC documents with IPFS hash storage
    fn submit_kyc() -> Weight {
        Weight::from_parts(27_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    /// Update KYC status with validation
    fn update_kyc_status() -> Weight {
        Weight::from_parts(22_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    /// Admin update KYC status with root check
    fn admin_update_kyc_status() -> Weight {
        Weight::from_parts(22_000_000, 4489)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}